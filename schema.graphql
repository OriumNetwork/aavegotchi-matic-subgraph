type AavegotchiOption @entity {
  "AavegotchiOption id is composed by <PORTAL-ID>-<GOTCHI-OPTION>"
  id: ID!

  portalOptionId: Int!

  owner: User!

  portal: Portal!

  randomNumber: BigInt!

  numericTraits: [Int!]!

  collateralType: Bytes!

  minimumStake: BigInt!

  baseRarityScore: Int!
}

type Aavegotchi @entity {
  id: ID!

  gotchiId: BigInt!

  owner: User

  originalOwner: User

  portal: Portal! @derivedFrom(field: "gotchi")

  hauntId: BigInt!

  name: String!
  nameLowerCase: String!

  randomNumber: BigInt!

  status: BigInt!

  numericTraits: [Int!]!

  modifiedNumericTraits: [Int!]!

  withSetsNumericTraits: [Int!]

  equippedWearables: [Int!]!
  equippedSetID: BigInt
  equippedSetName: String

  possibleSets: BigInt
  # equippedSetName: String
  # equippedSetTraitBonuses:[Int!]
  # rarityScoreWithSet:BigInt!
  # numericTraitsWithSet:[Int!]

  collateral: Bytes!

  escrow: Bytes!

  stakedAmount: BigInt!

  minimumStake: BigInt!

  kinship: BigInt! #The kinship value of this Aavegotchi. Default is 50.
  lastInteracted: BigInt!

  experience: BigInt! #How much XP this Aavegotchi has accrued. Begins at 0.
  toNextLevel: BigInt!

  usedSkillPoints: BigInt! #number of skill points used
  level: BigInt! #the current aavegotchi level
  baseRarityScore: BigInt!

  modifiedRarityScore: BigInt!

  withSetsRarityScore: BigInt

  locked: Boolean!

  "Block in which the Aavegotchi entity was created"
  createdAt: BigInt

  "Block in which the Aavegotchi was claimed. Should coincide with createdAt"
  claimedAt: BigInt

  timesTraded: BigInt!

  historicalPrices: [BigInt!]

  activeListing: BigInt

  lending: BigInt
}

enum PortalStatus {
  Bought
  Opened
  Claimed
}

type Portal @entity {
  id: ID!

  gotchiId: BigInt

  buyer: User!

  hauntId: BigInt!

  owner: User!

  options: [AavegotchiOption!]! @derivedFrom(field: "portal")

  gotchi: Aavegotchi

  status: PortalStatus!

  boughtAt: BigInt

  openedAt: BigInt

  claimedAt: BigInt

  timesTraded: BigInt!

  historicalPrices: [BigInt!]

  activeListing: BigInt
}

type User @entity {
  id: ID!

  portalsBought: [Portal!]! @derivedFrom(field: "buyer")

  gotchisOwned: [Aavegotchi!]! @derivedFrom(field: "owner")

  gotchisOriginalOwned: [Aavegotchi!]! @derivedFrom(field: "originalOwner")

  portalsOwned: [Portal!]! @derivedFrom(field: "owner")

  gotchisLentOut: [BigInt!]!

  gotchisBorrowed: [BigInt!]!

  # borrowedGotchis: [GotchiLending!]! @derivedFrom(field: "borrower")
  # lendGotchis: [GotchiLending!]! @derivedFrom(field: "originalOwner")
}

### lending
type GotchiLending @entity {
  id: ID!
  rentDuration: BigInt!
  upfrontCost: BigInt!
  period: BigInt!

  gotchi: Aavegotchi!

  # gotch filter attributes
  gotchiBRS: BigInt
  gotchiTokenId: BigInt!
  gotchiKinship: BigInt!

  # profit split
  splitOwner: BigInt
  splitBorrower: BigInt
  splitOther: BigInt

  # tokens to share
  tokensToShare: [Bytes!]!

  whitelist: Whitelist
  whitelistMembers: [Bytes!]!
  whitelistId: BigInt
  thirdPartyAddress: Bytes

  borrower: Bytes
  lender: Bytes
  originalOwner: Bytes

  cancelled: Boolean!
  completed: Boolean!
  lastClaimed: BigInt

  timeAgreed: BigInt
  timeCreated: BigInt
  timeEnded: BigInt

  claimed: [ClaimedToken!]! @derivedFrom(field: "lending")
}

type ClaimedToken @entity {
  id: ID!
  lending: GotchiLending!
  token: Bytes!
  amount: BigInt!
}

type Whitelist @entity {
  id: ID!
  name: String!
  members: [Bytes!]!
  owner: User!
  ownerAddress: Bytes!

  "Access Right for max borrowed Gotchis, default 1"
  maxBorrowLimit: Int
}

#type Upgrade @entity {
#  id: ID!
#  calldata:
#}
